uuid-ossp TO GENERATE RANDOM UUID
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";


1. TABLES

PATIENTS TABLE

create table "patients"(
"id" uuid primary key,
"name" varchar(100) not null,
"email" varchar(100) not null unique,
"pass" varchar(255) not null unique,
"phone" varchar(15),
"dob" date,
"gender" varchar(2) check ("gender" in ('M', 'F', 'Z')),
"blood" varchar(4) check ("blood" in ('A+', 'A-', 'B+', 'B-', 'O+', 'O-', 'AB+', 'AB-')),
"past" varchar(255),
"address" varchar(100),
"createdAt" date,
"updatedAt" date);



DOCTORS TABLE

create table "doctors"(
"id" uuid primary key,
"name" varchar(100) not null,
"email" varchar(100) not null unique,
"pass" varchar(255) not null,
"phone" varchar(15),
"dob" date,
"gender" varchar(2) check ("gender" in ('M', 'F', 'Z')),
"blood" varchar(4) check ("blood" in ('A+', 'A-', 'B+', 'B-', 'O+', 'O-', 'AB+', 'AB-')), 
"address" varchar(100),
"specialty" varchar(20),
"bmdc" varchar(20),
"createdAt" date,
"updatedAt" date);



DOCTOR SLOTS TABLE

create table "slots"(
"doctorId" uuid not null references doctors(id) on delete cascade,
"id" uuid unique,
"dateOfSlot" date,
"startTime" time,
"endTime" time,
"status" numeric check ("status" in (0, 1)),
"createdAt" date,
"updatedAt" date);



DOCTOR PATIENT LIST TABLE

create table "doctor_patient"(
"doctorId" uuid not null references doctors(id) on delete cascade,
"patientId" uuid not null references patients(id) on delete cascade,
"dateOfAssignment" date not null);

alter table "doctor_patient"
add constraint unq_constraint unique("doctorId", "patientId");



APPOINTMENTS TABLE

create table "appointments"(
"id" uuid primary key,
"patientId" uuid not null references patients(id) on delete cascade,
"prescription" varchar(255),
"slotId" uuid references slots(id) on delete cascade,
"status" varchar(30) check ("status" in ('Scheduled', 'Complete')),
"createdAt" date,
"updatedAt" date);



RATINGS TABLE

create table "ratings"(
"doctorId" uuid primary key references doctors(id) on delete cascade,
"numRatings" numeric,
"sumRatings" numeric,
"average" numeric,
"createdAt" date,
"updatedAt" date);




2. TRIGGERS

TRIGGER TO CREATE ENTRY IN DOCTOR_RATINGS TABLE AS SOON AS DOCTOR REGISTERS

create or replace function doc2rating()
returns trigger
as
$$
begin
insert into "ratings" ("doctorId", "numRatings", "sumRatings", "average")
values (NEW.id, 0, 0, 0);
return new;
end;
$$
language plpgsql;

create trigger doc2ratingTrig
after insert
on "doctors"
for each row
execute procedure doc2rating();



TRIGGER TO CREATE ENTRY IN DOCTOR PATIENT REGISTRY AS SOON AS APPOINTMENT IS MADE

create or replace function app2reg()
returns trigger
as
$$
declare
doctorId uuid;
begin
select "doctorId" into doctorId from "slots" where "id" = NEW."slotId";
if exists (select * from "doctor_patient" where "doctorId" = doctorId and "patientId" = NEW."patientId")
then
RAISE NOTICE 'Already listed';
else
insert into "doctor_patient" ("doctorId", "patientId", "dateOfAssignment") values (doctorId, NEW."patientId", now());
end if;
return new;
end;
$$
language plpgsql;

create trigger app2regTrig
after insert
on "appointments"
for each row
execute procedure app2reg();



TRIGGER TO REMOVE ENTRY IN DOCTOR PATIENT REGISTRY IF APPOINTMENT IS CANCELLED BEFORE TAKING PLACE

create or replace function regRemove()
returns trigger
as
$$
declare
dateRegCmp date;
dateAppCmp date;
doctorId uuid;
begin
select "dateOfSlot" into dateAppCmp from "slots" where "id" = OLD."slotId";
select "doctorId" into doctorId from "slots" where "id" = OLD."slotId";
select "dateOfAssignment" into dateRegCmp from "doctor_patient" where "patientId" = OLD."patientId" and "doctorId" = doctorId;
RAISE NOTICE 'dateAppCmp = %, dateRegCmp = %, doctorId = %', dateAppCmp, dateRegCmp, doctorId;
if ( dateAppCmp > dateRegCmp )
then
delete from "doctor_patient" where "doctorId" = doctorId and "patientId" = OLD."patientId";
end if;
return new;
end;
$$
language plpgsql;

create trigger regRemoveTrig
after delete
on "appointments"
for each row
execute procedure regRemove();
